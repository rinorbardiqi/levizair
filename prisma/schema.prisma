// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id                  String          @id @default(cuid())
    name                String
    email               String          @unique
    password            String
    dateOfBirth         DateTime
    documentId          Int?
    addressId           Int?
    frequentFlyerNumber String?
    phone               String?
    tags                String
    salutation          Salutation
    gender              Gender
    passengerType       PassengerType
    accounts            Account[]
    sessions            Session[]
    Booking             Booking[]
    address             Address?        @relation(fields: [addressId], references: [id])
    LoyaltyPoints       LoyaltyPoints[]
    ReferdBooking       Booking[]       @relation("Refered")
}

model Address {
    id         Int    @id @default(autoincrement())
    street     String
    city       String
    postalCode String
    User       User[]
}

enum DocumentType {
    PASSPORT
    NATIONAL_ID
}

// Define the Booking model
model Booking {
    id         Int      @id @default(autoincrement())
    tickets    Ticket[]
    user       User     @relation(fields: [userUserId], references: [id])
    refered    User?    @relation("Refered", fields: [referedBy], references: [id])
    referedBy  String?
    userUserId String
}

// Define the Ticket model
model Ticket {
    id               Int             @id @default(autoincrement())
    ticketingAirline Airline         @relation(fields: [arlineId], references: [id])
    ticketStatus     TicketStatus
    issuedDate       DateTime
    bookedSegments   BookedSegment[]
    bookingId        Int
    Booking          Booking         @relation(fields: [bookingId], references: [id])
    arlineId         Int
}

enum TicketStatus {
    ACTIVE
    CANCELED
    REFUNDED
}

enum Salutation {
    MR
    MS
    MRS
    CHD
    INF
}

enum Gender {
    M
    F
}

enum PassengerType {
    ADULT
    CHILD
    INFANT
}

// Define the BookedSegment model
model BookedSegment {
    id            Int          @id @default(autoincrement())
    destination   Location     @relation(fields: [destinationId], references: [id])
    flight        Flights      @relation(fields: [flightId], references: [id])
    flightDate    DateTime
    airlineCode   Airline?     @relation(fields: [airlineId], references: [id])
    departureDate DateTime
    arrivalDate   DateTime
    bookingClass  BookingClass
    price         Float
    taxPercentage Float
    ticketId      Int
    Ticket        Ticket       @relation(fields: [ticketId], references: [id])
    destinationId Int
    flightId      Int
    airlineId     Int?
}

enum BookingClass {
    ECONOMY
    PREMIUM_ECONOMY
    BUSINESS
    FIRST
}

// Define the Airline model
model Airline {
    id            Int             @id @default(autoincrement())
    value         String
    name          String
    Ticket        Ticket[]
    BookedSegment BookedSegment[]
    Flights       Flights[]
    LoyaltyPoints LoyaltyPoints[]
}

model Flights {
    id                 Int             @id @default(autoincrement())
    destination        Location        @relation(fields: [destinationId], references: [id])
    startDestination   Location        @relation("Start Location", fields: [startDestinationId], references: [id])
    destinationId      Int
    flightDate         DateTime
    Airline            Airline         @relation(fields: [airlineId], references: [id])
    airlineId          Int
    BookedSegment      BookedSegment[]
    startDestinationId Int
}

model Location {
    id            Int             @id @unique @default(autoincrement())
    name          String
    iataCode      String
    latitude      Float?
    longitude     Float?
    country       String
    City          String
    BookedSegment BookedSegment[]
    Flights       Flights[]
    Events        Events[]
    StartFlights  Flights[]       @relation("Start Location")
}

model LoyaltyPoints {
    id        Int     @id @default(autoincrement())
    user      User    @relation(fields: [userId], references: [id])
    userId    String
    airline   Airline @relation(fields: [airlineId], references: [id])
    airlineId Int     @unique
    value     Int
    level     Int
}

model Events {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    Location    Location @relation(fields: [locationId], references: [id])
    locationId  Int
    tags        String
}
